variables 
1. Variable names should be unique
2. The name should not be any reserved keyword
3. The name must start with a Character, _, &.
var variable = 'variable value';

3 ways to create a variable:
var
let - when you plan on changing the variable later on.
const - constant. cant change the variable.


let is the preferred method of creating variables in modern javascript.
let variableName = 'Welcome to variables'; 

To reassign the variable value:
variableName = 'Hello!'; 

const
const is the method for assigning variables that never change.
You cannot re declare the value of a const with the same name.

You cannot declare a const, var or let by the name const, var or let.

All variables must be named using the following scheme:
first character needs to be a letter, underscore or a dollar sign.
cannot use special characters within variable names either (only _ and $ is allowed)

Comments:
vscode allows you to press ctrl + / to comment out mult lines in vscode. you can highlite a block of code and use this to comment it all out.
// basic single line comment

/* multi
line
comment
*/

Console log
console.log(); 
Watch the console in the developer tools of the browser. If the code is broken you will not see the console, you will see an error.
You can call variables this way, you can put 'strings of text' in the paranthesis.

date    
const date = new Date();
console.log(date)
Data types

strings - typical strings of characters. Feilds of text. Must be surrounded by quotes.
numbers - numbers, includinng onese with decimal values and negative. 
booleans - true or false
null - speccifies we have a place to store a value, but the value doesn't exist
undefined - you dont have a variable or value
object - important data type, the building block for modern javascript. complex data types.
symbol - not so much used

strings
'single' and "double" quotes are not really any different
`backticks` are used to provide extended functionality. 
NaN
not a number. Ofen returned when you try to perform mathmatical operations on strings with numbers.
the data type of NaN is actually number!

booleans
true false normal boolean behaviour for logic. 
true - yes, correct 1
false - no, wrong, 0
booleans are returned as a result of comparison operators.

undefined
javascript considers variables with no data value an undefined data type
simply assigned like:
let x;
notice no value assigned

null
is the datatype of object. a bug in javascript. wont be fixed because if it is, a lot of code out in the world will break.

object
the only variable that can store more than one thing
collection of data
const person = {
    name: 'John'
    age: 25,
}

dot notation
used to get only the specified element of the object specified.
for example to get only the name of the person in the console:
console.log(person.name);

array
ordered data collections
const arr = [1, 2, 3, 4];
when viewing arrays in the console, the index for each element in the array is displayed.

javascript is dynamically typed: it can contain any datatype and be changed to any data type.
some programming languages do not allow variable data to be changed to a different type (statically typed)

comparison operators
>
<
=
>=
<=
== test if both are equal to eachother. loose equality.
!= test if both are not equal to eachother
always return a boolean value

Strict equality
===
Compares both values and types to see if they are the same.
5 is not strictly equal to "5". "5" is a string. 5 is a number.

Strict inequality
!==
check for evyerthing about both variables tro be different

Loose equality
==
doesnt compare data types. almost never use this.

Its important to use strict equality and strict inequality more often than not
loose will return unexpected results sometimes

console.log(true == 1); //returns true... even though true and 1 are not the same data type.
console.log("5" == 5); // returns true... even though "5" is a str and 5 is number

Logical operators
and &&   checks all operands are true and returns true or false.
console.log(true && true && false); // returns false
console.log(true && true && true); // returns true

or ||    checks at least one operand is true, returns true if it is
console.log(true || false); // returns true
console.log(false || false); // returns false
not !     reverses the boolean value

console.log(!false);



if statements
Example of typical if statment in javascript
const age = 28;

if (age > 18) {
    console.log('Adult');
} else if (age === 18) {
    console.log('Young adult');
} else {
    console.log('child');
}

loops
for or while loops

While loops

while(condition) {
    //code
}

example:
let i = 0;

while(i < 10) { // stay in the loop until i is 10 (10 iterations)
    console.log(i);
    i++; // increment i by one
}

For loops:
for([initialization]; [condition]; [final expression]);
initialization - to define and set up your loop variable
condition  -  evaluated at the beginning of every loop iteration, and continues as long as it evaluates to true. When conditions to false the loop stops executing.
final expression  -  executed at the end of each loop iteration, prior to the next condition check. used to increment or decrement a number.

example:
for(let i = 0; i < 10; 1++) {
    console.log(i);
}

For loops are good for things that increment a small amount

Dont write DRY code
DONT. REAPEAT. YOURSELF.

Functions
a block of code designed to perform a particular task.
console.log() is a builtin function of javascript that prints to the console.
You can define functions and call functions in javascript also.
function name(parameter) {
    return code;
}

then call them later on when you need to use the function
create a variable and use the console.log function to get its value
const result = name(parameter);
console.log(result)

name  -  you can use anything that is not a javascript keyword.
parameter  -   are values we will send to the function when we call it.
return  -  every function needs it. specifies the value that will be returned by the function.

Function declaration:
example:
function name(params) {
    //statements
    //have access to "this" keyword
}

Function expression:
const name = function(params) {
    //statements
}

Arrow function - the most modern way to declare a function in modern javascript
const name = (params)
const name = (params) => {
    //statements
}

Invoking a function
name();

Example: 

// Declare a function named sayHi and send Hi to the specified name.
function sayHi(name) {
    console.log(`Hi, ${name}`);
}

Call the function with multiple different names:
sayHi('Bill');
sayHi('Justin');
sayHi('Aaron')

Every function in javascript returns undefined unless otherwise specified
function add(a, b) {
    return a + b;
}

const sum = add(2, 2);

console.log(sum);


Arrow functions
do not create their own "this" value

**** This ****
const square = (number) => {
    return number * number;
}

const result = square(5);


**** Is the same as ****
const square = (number) => number * number;

You can also declare it without parenthasis if there is only one parameter

const square = number => number * number;

You can call it -
const result = square(10);

console.log (result);




Javascript output
